Problem 1: Some users don’t appear in the DM list
Your /api/users route excludes the current user with:

js
Copy code
.where(currentUserId ? not(eq(users.id, currentUserId)) : undefined)
That’s intended, but if currentUserId is undefined—i.e., your session/user isn’t recognized—then req.isAuthenticated() might fail earlier, or the route might skip adding that condition and return everyone, or else block you. It can lead to inconsistent user lists depending on login state.

Additionally, in DirectMessagesList.tsx:

ts
Copy code
const { data: users = [] } = useQuery<User[]>({
  queryKey: ["/api/users"],
  enabled: !!currentUser,
});
If currentUser is null or never sets, React Query never fetches. You’ll see an empty array.
Solution

Confirm req.user is properly set. If the server is returning 401 for /api/users, you’ll never see anyone.
If you actually want all users, remove that “except current user” logic or handle it client-side.
Make sure currentUser is non-null by the time you render DirectMessagesList, so enabled: !!currentUser isn’t always false.
Problem 2: The “correct” DM messages aren’t being loaded
You’re loading a DM conversation by user ID, then storing that conversation’s ID, and separately fetching /api/dm/conversations/:conversationId/messages. But if your code doesn’t actually provide queryFn, React Query does nothing by default. For example, in DirectMessagePage.tsx:

ts
Copy code
const { data: conversation } = useQuery<Conversation>({
  queryKey: [`/api/dm/conversations/${otherUserId}`],
  enabled: !!otherUserId,
  // Missing queryFn
});

const { data: messages = [] } = useQuery<Message[]>({
  queryKey: [`/api/dm/conversations/${conversation?.conversation?.id}/messages`],
  enabled: !!conversation?.conversation?.id,
  // Missing queryFn
});
Unless you’ve globally configured a default fetch, no data ever arrives.

Another big issue is having(sql\count(*) = 2`)inapp.get("/api/dm/conversations/:userId")`:

js
Copy code
// ...
.where(
  inArray(directMessageParticipants.userId, [currentUserId, otherUserId])
)
.groupBy(directMessageParticipants.conversationId)
.having(sql`count(*) = 2`);
If an existing conversation has 3 participants or if the table has entries leftover, you’ll never match = 2, so you keep creating new conversations.
If you want strictly 1-on-1, that’s okay—but any extra rows break it.
Solutions

Define a queryFn so React Query actually fetches:

ts
Copy code
const { data: conversation } = useQuery<Conversation>({
  queryKey: [`/api/dm/conversations/${otherUserId}`],
  enabled: !!otherUserId,
  queryFn: async () => {
    const res = await fetch(`/api/dm/conversations/${otherUserId}`, { credentials: 'include' });
    if (!res.ok) throw new Error('Failed to load conversation');
    return res.json();
  },
});

const { data: messages = [] } = useQuery<Message[]>({
  queryKey: [`/api/dm/conversations/${conversation?.conversation?.id}/messages`],
  enabled: !!conversation?.conversation?.id,
  queryFn: async () => {
    const cid = conversation?.conversation?.id;
    const res = await fetch(`/api/dm/conversations/${cid}/messages`, { credentials: 'include' });
    if (!res.ok) throw new Error('Failed to load messages');
    return res.json();
  },
});
Check having(count(*) = 2)
If strictly 1-on-1 is correct, verify your database doesn’t have leftover rows from older group tests. If you want “at least these two users,” replace = 2 with >= 2.

Ensure the user is recognized
If your server never sets req.user (session issue), your routes might return 401 or 403. Check server logs to see if /api/users or /api/dm/... is being denied.

Implementing those changes will fix the missing users in your DM list and ensure you load the right conversation messages.